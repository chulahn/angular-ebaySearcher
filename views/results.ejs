<!DOCTYPE html>
<html lang="en">
<head>

	<!-- JS Libraries -->
	<script src="https://code.jquery.com/jquery-2.1.1.min.js"></script>
	<script src="https://code.jquery.com/ui/1.11.2/jquery-ui.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.3.3/angular.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.0/d3.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/d3-tip/0.6.3/d3-tip.min.js"></script>

	<!-- Stylesheets -->
	<!-- <link href="../styles/style.css" rel="stylesheet"></link> -->
	<link rel="stylesheet/less" type="text/css" href="../styles/style.less"></link>
	<script type="text/javascript" src="http://cdnjs.cloudflare.com/ajax/libs/less.js/2.1.1/less.min.js"></script>


	<script src="../controller.js"></script>
	<script src="../scripts/d3viz.js"></script>
	<script>				
		Date.prototype.getDateString = function() {
			return this.getMonth()+1 + "/" + this.getDate() + "/" + (this.getYear()-100)
		}

		Date.prototype.getTime = function() {
			return this.getHours() + ":" + this.getMinutes() + ":" + this.getSeconds()
		}

		<% 
			var numPages =  JSON.parse(JSON.stringify(ejs_pagination)) 
			var totalEntries = numPages.totalEntries[0]; 
			var entriesPerPage = numPages.entriesPerPage[0] 
		%>

		//items: values before mapped, newItems: after
		var items = <%- JSON.stringify(ejs_items) %>
		var newItems = <%- JSON.stringify(ejs_newItems) %>

		var searchParams = <%- JSON.stringify(ejs_searchParams) %>

		var requestURL = <%- JSON.stringify(ejs_reqURL) %>
		
		var totalResults = <%- entriesPerPage %>
		var pageNum = 1;
		var maxPage = Math.ceil(<%- totalEntries %> / <%- entriesPerPage %>);
		


		$(document).ready(function() {

			if (pageNum === maxPage) {
				showLoadedAllButton();
			}

			if (maxPage > 12) {
				$('#loadAllButton').hide();
			}

			function makeRequest(i) {
				var newRequestURL = requestURL + "&paginationInput.pageNumber=" + (i+1);
				console.log('making request to ', newRequestURL)
				var request = $.ajax({url : newRequestURL , dataType: "jsonp"});

				request.done(function() {
					console.log('finished request');
					parseData(request.responseJSON);
					pageNum++;
					updateViz("newData");
				
					if (pageNum === maxPage) {
						showLoadedAllButton();
					}
				});
			}
			//Makes AJAX call to get next 100 items.
			$('#moreResultsButton').click(function() {
				if (pageNum <= maxPage-1) {
					makeRequest(pageNum);
				}
			});

			$('#next1000Button').click(function() {

				if (pageNum <= maxPage -1) {

					for (var i=pageNum; i<(pageNum+10); i++) {
						(function(i) {
							console.log("i == ", i);
							setTimeout(makeRequest(i), 3000);

						})(i);
					}

				}
			});

			$('#loadAllButton').click(function() {
				if (pageNum <= maxPage-1) {

					for (var i=pageNum; i<maxPage; i++) {

						(function(i) {
							console.log("i == ", i);
							setTimeout(makeRequest(i), 1500);

						})(i);
					}
				}
			});

		//Move to d3viz.js
			function cleanGraph() {


				var shown = $('svg circle[r="2"]');

				var expected = angular.element($('[ng-controller=dataController]')).scope().filteredItems

				var circles = d3.selectAll('circle').data(expected)

				circles.each(function() {

					var thisCircle = d3.select(this);

					if (thisCircle.attr('r') != 2) {

						console.log("fixing " , thisCircle.attr('r'));

						thisCircle
							.transition()
							.duration(1000)
							.attr('r', 2)
							.attr('fill', 'black')
							.attr('fill-opacity',1)
					}

				});	
			}

			$('#filterDiv input').on('keyup', function() {
				updateViz();
				setTimeout(cleanGraph, 1000);
			});

			$('#filterDiv input').on('change', function() {
				setTimeout(updateViz, 100);
			});


			//Jumps to the item in the table and briefly highlights it.
			$('#container').on('click', 'a', highlightJump);
			$('#vizDiv').on('click', 'a', highlightJump)

			function highlightJump() {
				var current = $(this);
				var selectedID = current.attr('href').slice(1);

				var selectedCheckbox = $('#'+selectedID);
				var selectedRow = selectedCheckbox.parent().parent();

				selectedRow.addClass('jump');
				selectedRow.removeClass('jump', 1000);
			}


			var searchedForHTML = "";
			searchedForHTML += "Your searched keyword <b>" + searchParams.keyword +"</b><br/>";
			searchedForHTML += "Results were sorted by <b>" + searchParams.sortBy + "</b><br/>"

			$('#searchedFor').prepend(searchedForHTML);

		})//end document ready

		//After making AJAX call, maps data to be used with the app.
		//Then calls addToScope to add mapped data to scope.
		function parseData(JSONresponse) {
			console.log("parsedata");
			var responseName = "";

			//get the responseName property, so items can be accessed.
			//findCompletedItemsResponse, findItemsByKeywordsResponse, etc.
			for (response in JSONresponse) {
				responseName = response;
			}

			JSONresponse = JSONresponse[responseName][0];

			var success = JSONresponse.ack[0];
			if (success === "Success" || success === "Warning") {

				var paginationOutput = JSONresponse.paginationOutput[0];
			
				var items = JSONresponse.searchResult[0].item;

				var newItems = items.map(function(item) {

					var itemDetails = {
						id: item.itemId[0],
						img : item.galleryURL[0],
						url : item.viewItemURL[0],
						title : item.title[0],
						condition : (item.condition && item.condition[0] && item.condition[0].conditionDisplayName[0]) || "No Condition Listed",
						conditionID : (item.condition && item.condition[0] && item.condition[0].conditionId[0]) || "No Condition Listed",

						country : (item.country && item.country[0]),
						location: item.location[0],

						startTime : {date : new Date(item.listingInfo[0].startTime[0])},
						endTime : {date : new Date(item.listingInfo[0].endTime[0])},

						status : item.sellingStatus[0].sellingState[0],

						price : parseFloat(item.sellingStatus[0].convertedCurrentPrice[0].__value__),
						shipping : parseFloat(item.shippingInfo[0] && item.shippingInfo[0].shippingServiceCost &&  item.shippingInfo[0].shippingServiceCost[0].__value__) || "Free"
					}

					if (item.shippingInfo[0].shippingType[0] === "Calculated") {
						itemDetails.shipping = "Calculated";
					}

					itemDetails.shortCondID = itemDetails.conditionID[0];

					itemDetails.finalPrice = parseFloat((itemDetails.price + (parseFloat(itemDetails.shipping) || 0)).toFixed(2));

					itemDetails.startTime.str = itemDetails.startTime.date.getDateString() + " " + itemDetails.startTime.date.getTime();
					itemDetails.endTime.str = itemDetails.endTime.date.getDateString() + " " + itemDetails.endTime.date.getTime();

					return itemDetails;
				});
			}
			console.log(newItems);

			addToScope(newItems);
		}
		function addToScope(newRequestedItems) {
			var scope = angular.element($('[ng-controller=dataController]')).scope();
			scope.items = scope.items.concat(newRequestedItems);

			$('#numEntries').html(scope.items.length);
			
			scope.$apply();
			console.log("addToScope: added items ", scope.items);
		}

		function showLoadedAllButton() {
			$('#next1000Button').hide();
			$('#loadAllButton').hide();
			$('#moreResultsButton').html("Loaded all results");
			$('#moreResultsButton').attr('id','allLoadedButton');			
		}

	</script>
	<script src="../scripts/script.js"></script>
	<meta charset="UTF-8">
	<title>Search Results</title>
</head>

<body ng-app="app" ng-controller="dataController">

	<div id="searchedFor">

		Total Results: <%= totalEntries %><br/>
		Showing {{filteredItems.length}} out of <span id="numEntries"><%- (parseInt(totalEntries) < parseInt(entriesPerPage)) ? totalEntries : entriesPerPage %></span> results<br/>

		
		<span id="moreResultsButton">Load Next 100 Results</span><br/>
		<span id="next1000Button">Load Next 1000 Results</span><br/>
		<span id="loadAllButton">Load All Results</span><br/>
		<span id="newSearch">Search another item?</span><br/>

		<div id="newSearchDiv">
			<form action="../get" method="post">
				<label for="keyword">Item: </label> <input id="keyword" name="keyword"><br/></p>

				<p><label for="sortBy">Sort By: </label>
					<select id="sortBy" name="sortBy">
						<option value="BestMatch">Best Match</option>
						<option value="PricePlusShippingLowest">Lowest Shipped Price</option>
						<option value="PricePlusShippingHighest">Highest Shipped Price</option>
						<option value="EndTimeSoonest">Ending soonest</option>
					</select>
				</p>

				<p><label for="requestType">Live/Completed:</label>
					<select id="requestType" name="requestType">
						<option value="findItemsByKeywords">Live Auctions</option>
						<option value="findCompletedItems">Completed Auctions</option>
					</select><br/></p>

				<button type="submit">Submit</button>
			</form>

		</div>

	</div>


	<div id="vizDiv"></div>

		{{$parse(oldestItem = getOldest(filteredItems))}}
		{{$parse(endOldestDateStr = (oldestItem.endTime.str.indexOf(" ") || "N/A") )}}
		<!--Showing results from {{(oldestItem.endTime.str.slice(0, endOldestDateStr) || "N/A") }}<br/> -->

	<div id="container">
		<div id="filteredDataDiv">
			<h3>Filtered</h3>
			Showing {{filteredItems.length}} item(s) <br/>
			Average Price: {{getAvg(filteredItems, 'price')}}<br/>
			Shipped: {{getAvg(filteredItems, 'finalPrice')}}<br/>
			{{$parse(lowestItem = getMin(filteredItems, 'finalPrice'))}}
			{{$parse(highestItem = getMax(filteredItems, 'finalPrice'))}}

			Lowest: <a href="#{{items.indexOf(lowestItem)}}">{{lowestItem.finalPrice || "N/A" }}</a><br/>
			Highest: <a href="#{{items.indexOf(highestItem)}}">{{highestItem.finalPrice || "N/A" }}</a>
			
			
		</div>

		<div id="filterDiv">
			<h2>Filter Results</h2>
			<input ng-model="searchFilter" id="searchFilter" placeholder="Search auction titles"><br/>
			<input ng-model="soldFilter" type="checkbox">Sold auctions only<br/>
			<input ng-model="newFilter" type="checkbox">New auctions only</body><br/>
			<input type="number" ng-model="minPrice" id="minPriceFilter" placeholder="Minimum"><input type="number" ng-model="maxPrice" id="maxPriceFilter" placeholder="Maximum"><br/>


		</div>

		
		<aside id="selectedData">
			<h3>Selected</h3>
			<span id="selectedItemNum">0 item(s)</span><br/>
			Average Price: <span id="selectedAvg"></span><br/>
			Shipped: <span id="selectedShipped"></span><br/>
			Lowest: <span id="selectedMin"></span><br/>
			Highest: <span id="selectedMax"></span>
		</aside>
	</div>

	
	<table id="searchResultsTable">
		<tr>
			<th>Image</th>
			<th>Title</th>
			<th>ID</th>
			<th>Price</th>
			<th>End Date</th>
		</tr>

		{{$parse(
			filteredItems = (items | 
				filter: {title: searchFilter, 
						status: soldFilter ? 'EndedWithSales' : '', 
						shortCondID: newFilter ? '1' : ''} |
				priceFilter: (minPrice || 0) : (maxPrice || 10000) 
			) 
		)}}

		<tr ng-repeat = "item in filteredItems">

			<td><img ng-src = {{item.img}} ></td>
			<td><input type="checkbox" id="{{items.indexOf(item)}}"><a href = {{item.url}} >{{item.title}}</a></td>
			<td>{{item.id}}</td>
			<td>
				Price: {{item.price}}<br/>
				Shipping: {{item.shipping}}<br/>
				<span class="shippedPrice">Total: {{item.finalPrice}}</span><br/>
				<span class="nosale" ng-if="item.status === 'EndedWithoutSales'">ENDED WITHOUT SALE</span>
			</td>
			<td>{{item.endTime.str}}</td>
		</tr>
	</table>

	
</body>
</html>