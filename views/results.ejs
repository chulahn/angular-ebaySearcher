<!DOCTYPE html>
<html lang="en">
<head>

	<!-- JS Libraries -->
	<script src="https://code.jquery.com/jquery-2.1.1.min.js"></script>
	<script src="https://code.jquery.com/ui/1.11.2/jquery-ui.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.3.3/angular.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.0/d3.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/d3-tip/0.6.3/d3-tip.min.js"></script>
	<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/js/bootstrap.min.js"></script>


	<!-- Stylesheets -->
	<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css">
	<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap-theme.min.css">
	<link href="../styles/style.css" rel="stylesheet"></link>
	
	<script src="../scripts/controller.js"></script>
	<script src="../scripts/d3viz.js"></script>
	<script>				

		Array.prototype.getAvg = function() {
			var sum = 0;
			this.forEach(function(a) {
				sum += a;
			})
			return sum/this.length;
		}

		Number.prototype.getInputString = function() {
			if (this < 10 && this >= 0) {
				return "0"+this;
			}
			return this.valueOf();
		}

		Date.prototype.getDateString = function() {
			return this.getMonth()+1 + "/" + this.getDate() + "/" + (this.getYear()-100)
		}

		Date.prototype.getInputString = function() {
			return (this.getYear()+1900) + "-" + (this.getMonth()+1).getInputString() + "-" + this.getDate().getInputString() 
		}

		Date.prototype.getNextDayInputString = function() {

			var month = this.getMonth()+1;
			var day = this.getDate();

			var dayLimit = 31;
			//1,3,5,7,8,10,12 = 31
			//4,6,9,11

			if (month === 2) {
				if (this.getYear%4 !== 0) {
					dayLimit = 28;
				}
				else {
					dayLimit = 29;
				}
			}
			else if (month === 4 || month === 6 || month === 9 || month === 11) {
				dayLimit = 30;
			}

			output = (this.getYear()+1900) + "-" + month.getInputString() + "-" + (day+1).getInputString()
			
			if (day === dayLimit) {
				if (month !== 12) {
					output = (this.getYear()+1900) + "-" + (month+1).getInputString() + "-" + 1
				}
				else {
					output = (this.getYear()+1901) + "-" + 1 + "-" + 1
				}
			}

			return output;
		}

		Date.prototype.getPrevDayInputString = function() {
			var lastMonth = this.getMonth();
			var day = this.getDate();

			var dayLimit = 31;
			//1,3,5,7,8,10,12 = 31
			//4,6,9,11 = 30


			if (lastMonth === 2) {
				if (this.getYear%4 !== 0) {
					dayLimit = 28;
				}
				else {
					dayLimit = 29;
				}
			}
			else if (lastMonth === 4 || lastMonth === 6 || lastMonth === 9 || lastMonth === 11) {
				dayLimit = 30;
			}

			output = (this.getYear()+1900) + "-" + (lastMonth+1).getInputString() + "-" + (day-1).getInputString()
			
			if (day === 1) {
				if (lastMonth !== 0) {
					output = (this.getYear()+1900) + "-" + lastMonth.getInputString() + "-" + dayLimit.getInputString()
				}
				else {
					output = (this.getYear()+1899) + "-" + 12 + "-" + 31
				}
			}

			return output;
		}

		Date.prototype.getTime = function() {
			return this.getHours() + ":" + this.getMinutes() + ":" + this.getSeconds()
		}

		String.prototype.toDate = function() {
			var date = new Date(this);
			//remove time
			date = date.toLocaleDateString();
			return new Date(date);
		}

		String.prototype.getDate = function() {
			var date = new Date(this);
			return date.toLocaleDateString();
		}

		function toArray(obj) {
			var outputArray = [];
			for (a in obj) {
				if (obj.hasOwnProperty(a)) {
					var data = obj[a];
					data.date = new Date(a);

					outputArray.push(data);
				}
			}
			return outputArray;
		}
	</script>
	
	<script>

		<% 
			var numPages =  JSON.parse(JSON.stringify(ejs_pagination)) 
			var totalEntries = numPages; 
			var entriesPerPage = numPages 
		%>

		//items: values before mapped, newItems: after
		var items = <%- JSON.stringify(ejs_items) %>
		var newItems = <%- JSON.stringify(ejs_newItems) %>

		var searchParams = <%- JSON.stringify(ejs_searchParams) %>

		var requestURL = <%- JSON.stringify(ejs_reqURL) %>
		
		var totalResults = <%- entriesPerPage %>
		var pageNum = 1;
		var maxPage = Math.ceil(<%- totalEntries %> / <%- entriesPerPage %>);
		


		$(document).ready(function() {
			//----start set up page-----
			var searchedForHTML = "";
			searchedForHTML += "Your searched keyword <b>" + searchParams.keyword +"</b><br/>";
			searchedForHTML += "Results were sorted by <b>" + searchParams.sortBy + "</b><br/>";
			$('#searchedFor').prepend(searchedForHTML);

			if (pageNum === maxPage) {
				showLoadedAllButton();
			}

			if (maxPage < 10) {
				$('#next1000Button').hide();
			}

			if (maxPage > 12) {
				$('#loadAllButton').hide();
			}

			if (searchParams.requestType !== "findCompletedItems") {
				$('#soldFilter').hide();
			}
			//----end set up page---


			$(window).scroll(function() {
				if ($(window).scrollTop() > 500) {
		        	$('#selectedData').addClass('docked');
				}

			    else {
			        $('#selectedData').removeClass('docked');
			    }
			});

			//Makes AJAX call to get next 100 items.
			$('#moreResultsButton').click(function() {
				if (pageNum <= maxPage-1) {
					makeRequest(pageNum);
				}
			});

			$('#next1000Button').click(function() {
				if (pageNum <= maxPage -1) {
					console.log(pageNum);
					makeRequest(pageNum, pageNum + 10);
				}
			});

			$('#loadAllButton').click(function() {
				if (pageNum <= maxPage-1) {
					makeRequest(pageNum, maxPage);
				}
			});


			//Jumps to the item in the table and briefly highlights it.
			$('#container').on('click', 'a', highlightJump);
			$('#vizDiv').on('click', 'a', highlightJump);

			function highlightJump() {
				var current = $(this);
				var selectedID = current.attr('href').slice(1);

				var selectedCheckbox = $('#'+selectedID);
				var selectedRow = selectedCheckbox.parent().parent();

				selectedRow.addClass('jump');
				selectedRow.removeClass('jump', 1000);
			}
		});

		//Makes AJAX call to api based on current pageNumber
		//Once done, add data(parseAndAddToScope), and update visualization(updateViz)
		function makeRequest(i , j) {
			var newRequestURL = requestURL + "&paginationInput.pageNumber=" + (i+1);
			// console.log('making request to ', newRequestURL)
			var request = $.ajax({url : newRequestURL , dataType: "jsonp"});
			request.done(function() {
				// console.log('finished request');
				parseAndAddToScope(request.responseJSON);
				pageNum++;
				updateViz("newData");
			
				if (pageNum === maxPage) {
					showLoadedAllButton();
				}
				if (j != null && pageNum < j) {
					makeRequest(pageNum, j);
				}
			});
		}

		//After making AJAX call, maps data to be used with the app.
		//Then calls addToScope to add mapped data to scope.
		function parseAndAddToScope(JSONresponse) {
			var parsedData = parseData(JSONresponse);
			addToScope(parsedData);

			//takes JSONresponse, and returns a newly mapped JSON object to be used in rest of app
			function parseData(JSONresponse) {
				var responseName = "";

				//get the responseName property, so items can be accessed.
				//findCompletedItemsResponse, findItemsByKeywordsResponse, etc.
				for (var response in JSONresponse) {
					responseName = response;
				}

				JSONresponse = JSONresponse[responseName][0];

				var success = JSONresponse.ack[0];
				if (success === "Success" || success === "Warning") {

					//var paginationOutput = JSONresponse.paginationOutput[0];
				
					var items = JSONresponse.searchResult[0].item;

					if (items.length === 99) {
						console.log(JSONresponse);
						console.log('------');
					}

					var newItems = items.map(function(item) {

						var itemDetails = {
							id: item.itemId,
							img: (item.galleryURL && item.galleryURL[0]) || "../no_image.jpg",
							url: item.itemWebUrl,
							title: item.title,
							conditionID:
								(item.condition) ||
								"No Condition Listed",
							condition:
								(item.condition) ||
								"No Condition listed",

							location: item.location,

							startTime: item.itemCreationDate,
							// endTime: item.listingInfo[0].endTime[0],

							// status: item.sellingStatus[0].sellingState[0],

							price: item.price,
							shipping: item.shippingOptions
								
						};
						console.log(item, itemDetails)
						return itemDetails;
					});
					return newItems;
				}
			}

			//takes new JSON object, and adds data to scope
			//angular updates filteredDiv
			function addToScope(newRequestedItems) {
				var scope = angular.element($('[ng-controller=dataController]')).scope();
				scope.items = scope.items.concat(newRequestedItems);

				$('#numEntries').html(scope.items.length);
				
				scope.$apply();
				console.log("addToScope: added items ", scope.items);
			}
		}

		function showLoadedAllButton() {
			$('#next1000Button').hide();
			$('#loadAllButton').hide();
			$('#moreResultsButton').html("Loaded all results");
			$('#moreResultsButton').attr('id','allLoadedButton');			
		}

	</script>
	<script src="../scripts/script.js"></script>
	<meta charset="UTF-8">
	<title>Search Results</title>
</head>

<body ng-app="app" ng-controller="dataController">

	<div id="searchedFor">

		Total Results: {{items.length}}<br/>
		Showing {{items.length}} out of <span id="numEntries">{{items.length}}</span> results<br/>

		
		<span id="moreResultsButton" class="btn btn-sm btn-primary">Load Next 100 Results</span><br/>
		<span id="next1000Button" class="btn btn-sm btn-primary">Load Next 1000 Results</span><br/>
		<span id="loadAllButton" class="btn btn-sm btn-primary">Load All Results</span><br/>
		<span id="newSearch" class="btn btn-sm btn-success">Search another item?</span><br/>

		<div id="newSearchDiv">
			<form action="../get" method="post">
				<label for="keyword">Item: </label> <input id="keyword" name="keyword"><br/></p>

				<p><label for="sortBy">Sort By: </label>
					<select id="sortBy" name="sortBy">
						<option value="BestMatch">Best Match</option>
						<option value="PricePlusShippingLowest">Lowest Shipped Price</option>
						<option value="PricePlusShippingHighest">Highest Shipped Price</option>
						<option value="StartTimeNewest">Newly Listed</option>
						<option value="EndTimeSoonest">Ending soonest</option>
					</select>
				</p>

				<p><label for="requestType">Live/Completed:</label>
					<select id="requestType" name="requestType">
						<option value="findItemsByKeywords">Live Auctions</option>
						<option value="findCompletedItems">Completed Auctions</option>
					</select><br/></p>

				<button class="btn btn-default" type="submit">Submit</button>
			</form>

		</div>
	</div>


	<div id="vizDiv"></div>

		{{$parse(oldestItem = getOldest(filteredItems))}}
		{{$parse(endOldestDateStr = (oldestItem.endTime.indexOf("T") || "N/A") )}}
		Showing results from {{(oldestItem.endTime.slice(0, endOldestDateStr) || "N/A") }}<br/> 
	<div id="container">
		<div id="filteredDataDiv">
			<h3>Filtered</h3>
			Showing {{filteredItems.length}} item(s) <br/>
			Average Price: {{getAvg(filteredItems, 'price')}}<br/>
			Shipped: {{getAvg(filteredItems, 'finalPrice')}}<br/>
			{{$parse(lowestItem = getMin(filteredItems, 'finalPrice'))}}
			{{$parse(highestItem = getMax(filteredItems, 'finalPrice'))}}

			Lowest: <a href="#{{items.indexOf(lowestItem)}}">{{lowestItem.finalPrice || "N/A" }}</a><br/>
			Highest: <a href="#{{items.indexOf(highestItem)}}">{{highestItem.finalPrice || "N/A" }}</a>
			
			
		</div>

		<div id="filterDiv">
			<h2>Filter Results</h2>
			<input ng-model="searchFilter" id="searchFilter" placeholder="Search auction titles"><br/>
			<span id="soldFilter"><input ng-model="soldFilter" type="checkbox">Sold auctions only<br/></span>
			<input ng-model="newFilter" type="checkbox">New Items only</body><br/>
			<div id="priceFilterDiv">
				Price<br/>
				<label>Min:</label><input type="number" ng-model="minPrice" id="minPriceFilter" placeholder="Minimum" value="0"><br/>
				<label>Max:</label><input type="number" ng-model="maxPrice" title="10000" id="maxPriceFilter" placeholder="Maximum" value="1000">
			</div>
			<div id="dateFilterDiv">
				Date<br/>
				<label>From:</label><input type="date" ng-model="earliestDate" id="earliestDateFilter"><span id="earliestSpan"></span><br/>
				<label>To:</label><input type="date" ng-model="latestDate" id="latestDateFilter"><span id="latestSpan"></span>
			</div>
		</div>

		
		<aside id="selectedData">
			<h3>Selected</h3>
			<span id="selectedItemNum">0 item(s)</span><br/>
			Average Price: <span id="selectedAvg"></span><br/>
			Shipped: <span id="selectedShipped"></span><br/>
			Lowest: <span id="selectedMin"></span><br/>
			Highest: <span id="selectedMax"></span>
		</aside>
	</div>

	
	<table id="searchResultsTable">
		<tr>
			<th>Image</th>
			<th>Title</th>
			<th>ID</th>
			<th>Price</th>
			<th>End Date</th>
		</tr>


		{{$parse(filterObject = {"min" : (minPrice || 0), 
								 "max" : (maxPrice || 1000),
								 "start" : (earliestDate || defaultEarly),
								 "end" : (latestDate || defaultLate)
								}) }}
		<!-- {{filterObject}} -->

		{{$parse(
			filteredItems = (items | 
				filter: {title: searchFilter, 
						status: soldFilter ? 'EndedWithSales' : '', 
						shortCondID: newFilter ? '1' : ''} |
				<!-- priceFilter: (minPrice || 0) : (maxPrice || 10000)  -->
				priceFilter: filterObject 
			)
		)}}

		{{ filteredItems}}
		<!-- {{$parse (filteredItems = newItems)}} -->
		<tr ng-repeat = "item in items">

			<td><img ng-src = {{item.img}} ></td>
			<td><input type="checkbox" id="{{items.indexOf(item)}}"><a href = {{item.url}} >{{item.title}}</a></td>
			<td>{{item.id}}</td>
			<td>
				Price: {{item.price.value}}<br/>
				Shipping: {{item.shipping[0].shippingCost.value}}<br/>
				<!-- <span class="shippedPrice">Total: {{item.finalPrice}}</span><br/> -->
				<!-- <span class="nosale" ng-if="item.status === 'EndedWithoutSales'">ENDED WITHOUT SALE</span> -->
			</td>
			<td></td>
			<!-- <td>{{item.endTime}}</td> -->
		</tr>
	</table>

	
</body>
</html>